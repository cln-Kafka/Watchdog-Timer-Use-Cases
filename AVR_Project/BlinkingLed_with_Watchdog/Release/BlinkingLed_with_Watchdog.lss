
BlinkingLed_with_Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  000003d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bcc  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094f  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db2  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000766d  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018c  00000000  00000000  0000a019  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d3b  00000000  00000000  0000a23d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 00 	call	0x102	; 0x102 <main>
  9e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer0_Init>:
char called = 1;

void Timer0_Init(void)
{
    // Set Timer0 to CTC mode (WGM01 = 1, WGM00 = 0)
    TCCR0A = (1 << WGM01);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36

    // Set compare value for 1ms interrupt
    // Assuming 16 MHz clock with prescaler 64: (16*10^6 / (64 * (249 + 1))) = 1 kHz (1ms)
    OCR0A = 15;
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	97 bd       	out	0x27, r25	; 39

    // Enable Timer0 Compare Match A interrupt
    TIMSK0 = (1 << OCIE0A);
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

    // Set prescaler to 64 and start Timer0 (CS01 and CS00 bits set)
    TCCR0B = (1 << CS01) | (1 << CS00);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37
}
  b6:	08 95       	ret

000000b8 <__vector_14>:

// ISR for Timer0 Compare Match A
ISR(TIMER0_COMPA_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
    time++; // Increment the time variable every 1ms
  ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time>
  ce:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <time+0x1>
  d2:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <time+0x2>
  d6:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <time+0x3>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	a1 1d       	adc	r26, r1
  de:	b1 1d       	adc	r27, r1
  e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time>
  e4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <time+0x1>
  e8:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <time+0x2>
  ec:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <time+0x3>
}
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:


int main()
{
    // Initialize peripherals
    LEDM_Init();
 102:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LEDM_Init>
    WDGDrv_Init();
 106:	0e 94 cc 00 	call	0x198	; 0x198 <WDGDrv_Init>
    WDGM_Init();
 10a:	0e 94 1a 01 	call	0x234	; 0x234 <WDGM_Init>

    // Initialize Timer0
    Timer0_Init();
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <Timer0_Init>

    // Enable global interrupts by setting the I-bit in SREG
    SREG |= (1 << 7);
 112:	8f b7       	in	r24, 0x3f	; 63
 114:	80 68       	ori	r24, 0x80	; 128
 116:	8f bf       	out	0x3f, r24	; 63

    unsigned long lastTime = 0;
 118:	c1 2c       	mov	r12, r1
 11a:	d1 2c       	mov	r13, r1
 11c:	76 01       	movw	r14, r12
                called = 0;
                continue;
            }
            else
            {
                called = 1;
 11e:	c1 e0       	ldi	r28, 0x01	; 1
    unsigned long lastTime = 0;

    while (1)
    {
        // Check if 10ms have elapsed
        if ((time - lastTime) >= 10)
 120:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time>
 124:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <time+0x1>
 128:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <time+0x2>
 12c:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <time+0x3>
 130:	8c 19       	sub	r24, r12
 132:	9d 09       	sbc	r25, r13
 134:	ae 09       	sbc	r26, r14
 136:	bf 09       	sbc	r27, r15
 138:	0a 97       	sbiw	r24, 0x0a	; 10
 13a:	a1 05       	cpc	r26, r1
 13c:	b1 05       	cpc	r27, r1
 13e:	80 f3       	brcs	.-32     	; 0x120 <main+0x1e>
        {
            lastTime = time;
 140:	c0 90 03 01 	lds	r12, 0x0103	; 0x800103 <time>
 144:	d0 90 04 01 	lds	r13, 0x0104	; 0x800104 <time+0x1>
 148:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <time+0x2>
 14c:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <time+0x3>

            LEDM_Manage();
 150:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LEDM_Manage>

            if (called == 1)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	19 f4       	brne	.+6      	; 0x162 <main+0x60>
            {
                called = 0;
 15c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                continue;
 160:	df cf       	rjmp	.-66     	; 0x120 <main+0x1e>
            }
            else
            {
                called = 1;
 162:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
                stuck_flag = 1;
 166:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
                WDGM_MainFunction();
 16a:	0e 94 29 01 	call	0x252	; 0x252 <WDGM_MainFunction>
 16e:	d8 cf       	rjmp	.-80     	; 0x120 <main+0x1e>

00000170 <GPIO_Init>:
#define LED_PIN PB0

void GPIO_Init(void)
{
    // Initialise pin 4 in port B as output
    DDRB |= (1 << LED_PIN);
 170:	20 9a       	sbi	0x04, 0	; 4
}
 172:	08 95       	ret

00000174 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	a9 01       	movw	r20, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <GPIO_Write+0xc>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <GPIO_Write+0x8>
 184:	ca 01       	movw	r24, r20
    if (PinData == 1)
    {
        PORTB |= (1 << PinId); // Set the pin high
 186:	95 b1       	in	r25, 0x05	; 5
    DDRB |= (1 << LED_PIN);
}

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
    if (PinData == 1)
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	19 f4       	brne	.+6      	; 0x192 <GPIO_Write+0x1e>
    {
        PORTB |= (1 << PinId); // Set the pin high
 18c:	89 2b       	or	r24, r25
    }
    else
    {
        PORTB &= ~(1 << PinId); // Set the pin low
 18e:	85 b9       	out	0x05, r24	; 5
    }
}
 190:	08 95       	ret
    {
        PORTB |= (1 << PinId); // Set the pin high
    }
    else
    {
        PORTB &= ~(1 << PinId); // Set the pin low
 192:	80 95       	com	r24
 194:	89 23       	and	r24, r25
 196:	fb cf       	rjmp	.-10     	; 0x18e <GPIO_Write+0x1a>

00000198 <WDGDrv_Init>:

extern char stuck_flag;
void WDGDrv_Init(void)
{
	/*Disable global interrupts*/
	SREG &= ~(1 << PIN_I);
 198:	8f b7       	in	r24, 0x3f	; 63
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8f bf       	out	0x3f, r24	; 63

	/*reset the timer*/
	wdt_reset();
 19e:	a8 95       	wdr

	// Clear the watchdog reset flag
	MCUSR &= (~(1 << WDRF));
 1a0:	84 b7       	in	r24, 0x34	; 52
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	84 bf       	out	0x34, r24	; 52

	/*set the watchdog change enable and system reset enable to 1 in the same instruction before making any changes, page 44*/
	WDTCSR |= (1 << WDCE) | (1 << WDE);
 1a6:	e0 e6       	ldi	r30, 0x60	; 96
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 61       	ori	r24, 0x18	; 24
 1ae:	80 83       	st	Z, r24

	/*enable system reset mode
	 * Set maximum time-out value = 8K cycles (~64 ms) by seting the watchdog timer prescale pins to 0010
	 */
	WDTCSR = (1 << WDE) | (1 << WDP1);
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	80 83       	st	Z, r24

	/*Normal port operation, OC1A/OC1B disconnected
	 * CTC mode*/
	TCCR1A = 0;
 1b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	/*CTC mode
	 * 64ms prescale*/
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
 1b8:	8b e0       	ldi	r24, 0x0B	; 11
 1ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	/* Set the compare value which achieves 50 ms timer
	 * compare value (no of pulses needed to reach the timeout) = (desired time/ time of one pulse) -1
	 * time of one pulse= ( prescale)/ freq of the clock
	 * */
	OCR1A = 760;
 1be:	88 ef       	ldi	r24, 0xF8	; 248
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Enable timer1 output compare A match interrupt
	TIMSK1 = (1 << OCIE1A);
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	/*enable global interrupts by setting pinI in the AVR status register to 1*/
	SREG |= (1 << PIN_I);
 1d0:	8f b7       	in	r24, 0x3f	; 63
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	8f bf       	out	0x3f, r24	; 63
}
 1d6:	08 95       	ret

000001d8 <WDGDrv_IsrNotification>:
	WDGDrv_IsrNotification();
}

void WDGDrv_IsrNotification(void)
{
	WDGM_StatusType wdgmStatus = WDGM_PovideSuppervisionStatus();
 1d8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <WDGM_PovideSuppervisionStatus>

	// Check if the WDGM status is OK
	if ((wdgmStatus == OK) && (stuck_flag != 1))
 1dc:	81 11       	cpse	r24, r1
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <WDGDrv_IsrNotification+0x12>
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	09 f0       	breq	.+2      	; 0x1ea <WDGDrv_IsrNotification+0x12>
	{
		// restart the timer
		wdt_reset();
 1e8:	a8 95       	wdr
	}
}
 1ea:	08 95       	ret

000001ec <__vector_11>:
	/*enable global interrupts by setting pinI in the AVR status register to 1*/
	SREG |= (1 << PIN_I);
}

ISR(TIMER1_COMPA_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	4f 93       	push	r20
 1fc:	5f 93       	push	r21
 1fe:	6f 93       	push	r22
 200:	7f 93       	push	r23
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
	WDGDrv_IsrNotification();
 20e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <WDGDrv_IsrNotification>
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <WDGM_Init>:
extern char stuck_flag;

void WDGM_Init(void)
{
    // Initialize internal variables
	elapsedTime = 0;
 234:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <elapsedTime>
 238:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <elapsedTime+0x1>
 23c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <elapsedTime+0x2>
 240:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <elapsedTime+0x3>
    ledM_Manage_CallCount = 0;
 244:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ledM_Manage_CallCount+0x1>
 248:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ledM_Manage_CallCount>
    wdgmStatus = OK;
 24c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <wdgmStatus>
}
 250:	08 95       	ret

00000252 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{

    // Increment elapsed time by 10ms
    elapsedTime += 20;
 252:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <elapsedTime>
 256:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <elapsedTime+0x1>
 25a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <elapsedTime+0x2>
 25e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <elapsedTime+0x3>
 262:	44 96       	adiw	r24, 0x14	; 20
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
 268:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <elapsedTime>
 26c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <elapsedTime+0x1>
 270:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <elapsedTime+0x2>
 274:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <elapsedTime+0x3>

    // Check if 100ms has passed
    if (elapsedTime >= 100)
 278:	84 36       	cpi	r24, 0x64	; 100
 27a:	91 05       	cpc	r25, r1
 27c:	a1 05       	cpc	r26, r1
 27e:	b1 05       	cpc	r27, r1
 280:	a8 f0       	brcs	.+42     	; 0x2ac <WDGM_MainFunction+0x5a>
    {
        if (ledM_Manage_CallCount >= 8 && ledM_Manage_CallCount <= 12)
 282:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ledM_Manage_CallCount>
 286:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ledM_Manage_CallCount+0x1>
 28a:	08 97       	sbiw	r24, 0x08	; 8
 28c:	05 97       	sbiw	r24, 0x05	; 5
 28e:	88 f4       	brcc	.+34     	; 0x2b2 <WDGM_MainFunction+0x60>
        {
            wdgmStatus = OK;
 290:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <wdgmStatus>
        {
            wdgmStatus = NOK;
        }

        // Reset the elapsed time counter
        elapsedTime = 0;
 294:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <elapsedTime>
 298:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <elapsedTime+0x1>
 29c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <elapsedTime+0x2>
 2a0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <elapsedTime+0x3>

        // Reset for next period
        ledM_Manage_CallCount = 0;
 2a4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ledM_Manage_CallCount+0x1>
 2a8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ledM_Manage_CallCount>
    }
    stuck_flag = 0;
 2ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
}
 2b0:	08 95       	ret
        {
            wdgmStatus = OK;
        }
        else
        {
            wdgmStatus = NOK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <wdgmStatus>
 2b8:	ed cf       	rjmp	.-38     	; 0x294 <WDGM_MainFunction+0x42>

000002ba <WDGM_PovideSuppervisionStatus>:
}

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return wdgmStatus;
}
 2ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <wdgmStatus>
 2be:	08 95       	ret

000002c0 <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{
    ledM_Manage_CallCount++;
 2c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ledM_Manage_CallCount>
 2c4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ledM_Manage_CallCount+0x1>
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ledM_Manage_CallCount+0x1>
 2ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ledM_Manage_CallCount>
}
 2d2:	08 95       	ret

000002d4 <LEDM_Init>:
static uint8_t ledState = LED_ON;
static uint32_t elapsedTime = 0;

void LEDM_Init(void)
{
    GPIO_Init(); // Initialise GPIO for LED
 2d4:	0e 94 b8 00 	call	0x170	; 0x170 <GPIO_Init>
    GPIO_Write(LED_PIN, ledState);
 2d8:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <ledState>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0c 94 ba 00 	jmp	0x174	; 0x174 <GPIO_Write>

000002e2 <LEDM_Manage>:

void LEDM_Manage(void)
{
    
    // Increment elapsed time by 10ms
    elapsedTime += 10;
 2e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <elapsedTime>
 2e6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <elapsedTime+0x1>
 2ea:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <elapsedTime+0x2>
 2ee:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <elapsedTime+0x3>
 2f2:	0a 96       	adiw	r24, 0x0a	; 10
 2f4:	a1 1d       	adc	r26, r1
 2f6:	b1 1d       	adc	r27, r1
 2f8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <elapsedTime>
 2fc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <elapsedTime+0x1>
 300:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <elapsedTime+0x2>
 304:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <elapsedTime+0x3>

    // Check if 500ms has passed
    if (elapsedTime >= 500)
 308:	84 3f       	cpi	r24, 0xF4	; 244
 30a:	91 40       	sbci	r25, 0x01	; 1
 30c:	a1 05       	cpc	r26, r1
 30e:	b1 05       	cpc	r27, r1
 310:	98 f0       	brcs	.+38     	; 0x338 <LEDM_Manage+0x56>
    {
        // Toggle LED state
        ledState = (ledState == LED_ON) ? LED_OFF : LED_ON;
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ledState>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	09 f4       	brne	.+2      	; 0x31e <LEDM_Manage+0x3c>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <ledState>
        GPIO_Write(LED_PIN, ledState);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 ba 00 	call	0x174	; 0x174 <GPIO_Write>

        // Reset elapsed time
        elapsedTime = 0;
 328:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <elapsedTime>
 32c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <elapsedTime+0x1>
 330:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <elapsedTime+0x2>
 334:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <elapsedTime+0x3>
    }

    // Indicate aliveness to the watchdog manager
     WDGM_AlivenessIndication();
 338:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <WDGM_AlivenessIndication>

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
