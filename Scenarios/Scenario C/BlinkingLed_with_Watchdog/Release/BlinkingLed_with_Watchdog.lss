
BlinkingLed_with_Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003bc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800106  00800106  00000456  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c06  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5e  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007769  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000162  00000000  00000000  0000a365  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000a4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002db9  00000000  00000000  0000a55f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 00 	call	0x102	; 0x102 <main>
  9e:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer0_Init>:

/* Timer0 Initialization */
void Timer0_Init(void)
{
    // Set Timer0 to CTC mode (WGM01 = 1, WGM00 = 0)
    TCCR0A = (1 << WGM01);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36

    // Set compare value for 1ms interrupt
    // the clock frequency is 1MHz, the prescaler is 64, the timer is 8-bit
    OCR0A = TIMER0_OUTPUT_COMPARE_A;
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	97 bd       	out	0x27, r25	; 39

    // Enable Timer0 Compare Match A interrupt
    TIMSK0 = (1 << OCIE0A);
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

    // Set prescaler to 64 and start Timer0 (CS01 and CS00 bits set)
    TCCR0B = (1 << CS01) | (1 << CS00);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37
}
  b6:	08 95       	ret

000000b8 <__vector_14>:

// ISR for Timer0 Compare Match A
ISR(TIMER0_COMPA_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
    // Increment the time variable every 1ms
    time++;
  ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time>
  ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <time+0x1>
  d2:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <time+0x2>
  d6:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <time+0x3>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	a1 1d       	adc	r26, r1
  de:	b1 1d       	adc	r27, r1
  e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <time>
  e4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <time+0x1>
  e8:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <time+0x2>
  ec:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <time+0x3>
}
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:

int main()
{
	PORTB ^= (1 << TEST_PIN_MCU_Reset);  // Toggle again
 102:	85 b1       	in	r24, 0x05	; 5
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	89 27       	eor	r24, r25
 108:	85 b9       	out	0x05, r24	; 5

    // Initialize peripherals
    LEDM_Init();                // LED Manager
 10a:	0e 94 a5 01 	call	0x34a	; 0x34a <LEDM_Init>
    WDGDrv_Init();              // Watchdog Driver
 10e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <WDGDrv_Init>
    WDGM_Init();                // Watchdog Manager
 112:	0e 94 51 01 	call	0x2a2	; 0x2a2 <WDGM_Init>
    Timer0_Init();              // Timer0
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <Timer0_Init>

    // Enable global interrupts by setting the I-bit in SREG
    SREG |= (1 << PIN_I);
 11a:	8f b7       	in	r24, 0x3f	; 63
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	8f bf       	out	0x3f, r24	; 63
        {
            // Update the last time to the current time
            wdgm_lastTime = time;

            // Call the WDGM_MainFunction
            stuck_flag = 1;
 120:	c1 e0       	ldi	r28, 0x01	; 1
    {
        


        // Check if it's time to call LEDM_Manage
        if ((time - ledm_lastTime) >= LEDM_INTERVAL)
 122:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time>
 126:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <time+0x1>
 12a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <time+0x2>
 12e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <time+0x3>
 132:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <ledm_lastTime>
 136:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <ledm_lastTime+0x1>
 13a:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <ledm_lastTime+0x2>
 13e:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <ledm_lastTime+0x3>
 142:	84 1b       	sub	r24, r20
 144:	95 0b       	sbc	r25, r21
 146:	a6 0b       	sbc	r26, r22
 148:	b7 0b       	sbc	r27, r23
 14a:	0a 97       	sbiw	r24, 0x0a	; 10
 14c:	a1 05       	cpc	r26, r1
 14e:	b1 05       	cpc	r27, r1
 150:	90 f0       	brcs	.+36     	; 0x176 <main+0x74>
        {
            // Update the last time to the current time
            ledm_lastTime = time;
 152:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time>
 156:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <time+0x1>
 15a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <time+0x2>
 15e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <time+0x3>
 162:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ledm_lastTime>
 166:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ledm_lastTime+0x1>
 16a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <ledm_lastTime+0x2>
 16e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <ledm_lastTime+0x3>

            // Call the LED Manager
            LEDM_Manage();
 172:	0e 94 ac 01 	call	0x358	; 0x358 <LEDM_Manage>
        }

        // Check if it's time to call WDGM_MainFunction
        if ((time - wdgm_lastTime) >= WDGM_INTERVAL)
 176:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time>
 17a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <time+0x1>
 17e:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <time+0x2>
 182:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <time+0x3>
 186:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end>
 18a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x1>
 18e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end+0x2>
 192:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__data_end+0x3>
 196:	84 1b       	sub	r24, r20
 198:	95 0b       	sbc	r25, r21
 19a:	a6 0b       	sbc	r26, r22
 19c:	b7 0b       	sbc	r27, r23
 19e:	44 97       	sbiw	r24, 0x14	; 20
 1a0:	a1 05       	cpc	r26, r1
 1a2:	b1 05       	cpc	r27, r1
 1a4:	08 f4       	brcc	.+2      	; 0x1a8 <main+0xa6>
 1a6:	bd cf       	rjmp	.-134    	; 0x122 <main+0x20>
        {
            // Update the last time to the current time
            wdgm_lastTime = time;
 1a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <time>
 1ac:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <time+0x1>
 1b0:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <time+0x2>
 1b4:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <time+0x3>
 1b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1bc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1c0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 1c4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>

            // Call the WDGM_MainFunction
            stuck_flag = 1;
 1c8:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <stuck_flag>
            WDGM_MainFunction(); // Commented out for Scenario B
 1cc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <WDGM_MainFunction>
 1d0:	a8 cf       	rjmp	.-176    	; 0x122 <main+0x20>

000001d2 <GPIO_Init>:
#define LED_PIN PB0             // Pin 0 in port B

void GPIO_Init(void)
{
    // Initialise pin 0 in port B and test pins for the oscilloscope as output 
    DDRB |= (1 << LED_PIN) | (1 << TEST_PIN_WDGM) | (1<<TEST_PIN_LEDM) | (1 << TEST_PIN_MCU_Reset)| (1 << TEST_PIN_WDCounter_Reset);
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	8f 61       	ori	r24, 0x1F	; 31
 1d6:	84 b9       	out	0x04, r24	; 4
}
 1d8:	08 95       	ret

000001da <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{   
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	a9 01       	movw	r20, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <GPIO_Write+0xc>
 1e2:	44 0f       	add	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <GPIO_Write+0x8>
 1ea:	ca 01       	movw	r24, r20
    if (PinData == 1)
    {
        PORTB |= (1 << PinId);  // Set the pin high (Set)
 1ec:	95 b1       	in	r25, 0x05	; 5
    DDRB |= (1 << LED_PIN) | (1 << TEST_PIN_WDGM) | (1<<TEST_PIN_LEDM) | (1 << TEST_PIN_MCU_Reset)| (1 << TEST_PIN_WDCounter_Reset);
}

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{   
    if (PinData == 1)
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <GPIO_Write+0x1e>
    {
        PORTB |= (1 << PinId);  // Set the pin high (Set)
 1f2:	89 2b       	or	r24, r25
    }
    else
    {
        PORTB &= ~(1 << PinId); // Set the pin low (Clear)
 1f4:	85 b9       	out	0x05, r24	; 5
    }
}
 1f6:	08 95       	ret
    {
        PORTB |= (1 << PinId);  // Set the pin high (Set)
    }
    else
    {
        PORTB &= ~(1 << PinId); // Set the pin low (Clear)
 1f8:	80 95       	com	r24
 1fa:	89 23       	and	r24, r25
 1fc:	fb cf       	rjmp	.-10     	; 0x1f4 <GPIO_Write+0x1a>

000001fe <WDGDrv_Init>:
extern char stuck_flag;				// The flag that indicates whether the WDGM_MainFunction is stuck

void WDGDrv_Init(void)
{
	// Disable global interrupts
	SREG &= ~(1 << PIN_I);
 1fe:	8f b7       	in	r24, 0x3f	; 63
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	8f bf       	out	0x3f, r24	; 63

	// Reset the timer
	wdt_reset();
 204:	a8 95       	wdr

	// Clear the watchdog reset flag
	MCUSR &= (~(1 << WDRF));
 206:	84 b7       	in	r24, 0x34	; 52
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	84 bf       	out	0x34, r24	; 52

	// Set the watchdog change enable and system reset enable to 1 in the same instruction before making any changes, page 44
	WDTCSR |= (1 << WDCE) | (1 << WDE);
 20c:	e0 e6       	ldi	r30, 0x60	; 96
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	88 61       	ori	r24, 0x18	; 24
 214:	80 83       	st	Z, r24

	// Enable system reset mode
	// Set maximum time-out value = 8K cycles (~64ms) by seting the watchdog timer prescale pins to 0010
	WDTCSR = (1 << WDE) | (1 << WDP1);
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	80 83       	st	Z, r24

	// Normal port operation, OC1A/OC1B disconnected
	// CTC mode
	TCCR1A = 0;
 21a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	// CTC mode, prescaler 64
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
 21e:	8b e0       	ldi	r24, 0x0B	; 11
 220:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	// Set the compare value which achieves 50ms timer
	// the clock frequency is 1MHz, the prescaler is 64, the timer is 16-bit
	// sCompare value (no of pulses needed to reach the timeout) = [(clock frequency) / (prescaler*(1/desired time))]-1
	OCR1A = TIMER1_OUTPUT_COMPARE_A;
 224:	8f e2       	ldi	r24, 0x2F	; 47
 226:	93 e0       	ldi	r25, 0x03	; 3
 228:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 22c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Enable Timer1 output compare A match interrupt
	TIMSK1 = (1 << OCIE1A);
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	// Enable global interrupts by setting PIN_I in the AVR status register to 1
	SREG |= (1 << PIN_I);
 236:	8f b7       	in	r24, 0x3f	; 63
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	8f bf       	out	0x3f, r24	; 63
}
 23c:	08 95       	ret

0000023e <WDGDrv_IsrNotification>:
}

void WDGDrv_IsrNotification(void)
{	
	// Get the WDGM status from the WDGM component
	WDGM_StatusType wdgmStatus = WDGM_PovideSuppervisionStatus();
 23e:	0e 94 98 01 	call	0x330	; 0x330 <WDGM_PovideSuppervisionStatus>

	// Check if the WDGM status is OK and whether the WDGM_MainFunction is stuck
	if (((wdgmStatus == OK) && (stuck_flag != 1)))
 242:	81 11       	cpse	r24, r1
 244:	05 c0       	rjmp	.+10     	; 0x250 <WDGDrv_IsrNotification+0x12>
 246:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <stuck_flag>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <WDGDrv_IsrNotification+0x12>
	{
		
		// If so, refresh the watchdog
		wdt_reset();
 24e:	a8 95       	wdr
	}
}
 250:	08 95       	ret

00000252 <__vector_11>:
	// Enable global interrupts by setting PIN_I in the AVR status register to 1
	SREG |= (1 << PIN_I);
}

ISR(TIMER1_COMPA_vect)
{	// toggle WDT Counter reset 
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
		PORTB ^= (1 << TEST_PIN_WDCounter_Reset);
 274:	85 b1       	in	r24, 0x05	; 5
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	89 27       	eor	r24, r25
 27a:	85 b9       	out	0x05, r24	; 5
	// Call the WDGDrv_IsrNotification function at the timeout (50ms)
	WDGDrv_IsrNotification();
 27c:	0e 94 1f 01 	call	0x23e	; 0x23e <WDGDrv_IsrNotification>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <WDGM_Init>:


void WDGM_Init(void)
{
    // Initialize internal variables
    elapsedTime = 0;
 2a2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <elapsedTime>
 2a6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <elapsedTime+0x1>
 2aa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <elapsedTime+0x2>
 2ae:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <elapsedTime+0x3>
    ledM_Manage_CallCount = 0;
 2b2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ledM_Manage_CallCount+0x1>
 2b6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <ledM_Manage_CallCount>
    wdgmStatus = OK;
 2ba:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <wdgmStatus>
}
 2be:	08 95       	ret

000002c0 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    // toggle WDGM 
    PORTB ^= (1 << TEST_PIN_WDGM); 
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	90 e1       	ldi	r25, 0x10	; 16
 2c4:	89 27       	eor	r24, r25
 2c6:	85 b9       	out	0x05, r24	; 5

    // Increment elapsed time by 20ms
    elapsedTime += 20;
 2c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <elapsedTime>
 2cc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <elapsedTime+0x1>
 2d0:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <elapsedTime+0x2>
 2d4:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <elapsedTime+0x3>
 2d8:	44 96       	adiw	r24, 0x14	; 20
 2da:	a1 1d       	adc	r26, r1
 2dc:	b1 1d       	adc	r27, r1
 2de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <elapsedTime>
 2e2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <elapsedTime+0x1>
 2e6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <elapsedTime+0x2>
 2ea:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <elapsedTime+0x3>

    // Check if 100ms has passed
    if (elapsedTime >= 100)
 2ee:	84 36       	cpi	r24, 0x64	; 100
 2f0:	91 05       	cpc	r25, r1
 2f2:	a1 05       	cpc	r26, r1
 2f4:	b1 05       	cpc	r27, r1
 2f6:	a8 f0       	brcs	.+42     	; 0x322 <WDGM_MainFunction+0x62>
    {   
        // Check if the LEDM_Manage function was called 8 to 12 times
        // Mathematically, the function should be called 10 times (100ms / 10ms(delay) = 10 times)
        if ((ledM_Manage_CallCount >= 8) && (ledM_Manage_CallCount <= 12))
 2f8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ledM_Manage_CallCount>
 2fc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <ledM_Manage_CallCount+0x1>
 300:	08 97       	sbiw	r24, 0x08	; 8
 302:	05 97       	sbiw	r24, 0x05	; 5
 304:	88 f4       	brcc	.+34     	; 0x328 <WDGM_MainFunction+0x68>
        {
            wdgmStatus = OK;
 306:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <wdgmStatus>
        {
            wdgmStatus = NOK;
        }

        // Reset the elapsed time counter
        elapsedTime = 0;
 30a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <elapsedTime>
 30e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <elapsedTime+0x1>
 312:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <elapsedTime+0x2>
 316:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <elapsedTime+0x3>

        // Reset for next period
        ledM_Manage_CallCount = 0;
 31a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <ledM_Manage_CallCount+0x1>
 31e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <ledM_Manage_CallCount>
    }

    // Reset the stuck flag
    stuck_flag = 0;
 322:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <stuck_flag>
}
 326:	08 95       	ret
        {
            wdgmStatus = OK;
        }
        else
        {
            wdgmStatus = NOK;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <wdgmStatus>
 32e:	ed cf       	rjmp	.-38     	; 0x30a <WDGM_MainFunction+0x4a>

00000330 <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{   
    // Return the status of the Watchdog Manager
    return wdgmStatus;
}
 330:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <wdgmStatus>
 334:	08 95       	ret

00000336 <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{   
    // Increment the LEDM_Manage call count
    ledM_Manage_CallCount++;
 336:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ledM_Manage_CallCount>
 33a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <ledM_Manage_CallCount+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ledM_Manage_CallCount+0x1>
 344:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ledM_Manage_CallCount>
}
 348:	08 95       	ret

0000034a <LEDM_Init>:
static uint32_t elapsedTime = 0;                // Time elapsed since the last LEDM_Manage Call

void LEDM_Init(void)
{
    // Initialise GPIO for LED
    GPIO_Init();
 34a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GPIO_Init>
    // Set the initial state of the LED to "ON"
    GPIO_Write(LED_PIN, ledState);
 34e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <ledState>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0c 94 ed 00 	jmp	0x1da	; 0x1da <GPIO_Write>

00000358 <LEDM_Manage>:
}

void LEDM_Manage(void)
{
    // toggle ledmanage
    PORTB ^= (1 << TEST_PIN_LEDM);
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	98 e0       	ldi	r25, 0x08	; 8
 35c:	89 27       	eor	r24, r25
 35e:	85 b9       	out	0x05, r24	; 5

    // Increment elapsed time by 10ms
    elapsedTime += 10;
 360:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <elapsedTime>
 364:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <elapsedTime+0x1>
 368:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <elapsedTime+0x2>
 36c:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <elapsedTime+0x3>
 370:	0a 96       	adiw	r24, 0x0a	; 10
 372:	a1 1d       	adc	r26, r1
 374:	b1 1d       	adc	r27, r1
 376:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <elapsedTime>
 37a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <elapsedTime+0x1>
 37e:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <elapsedTime+0x2>
 382:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <elapsedTime+0x3>

    // Check if 500ms has passed
    if (elapsedTime >= 500)
 386:	84 3f       	cpi	r24, 0xF4	; 244
 388:	91 40       	sbci	r25, 0x01	; 1
 38a:	a1 05       	cpc	r26, r1
 38c:	b1 05       	cpc	r27, r1
 38e:	98 f0       	brcs	.+38     	; 0x3b6 <LEDM_Manage+0x5e>
    {
        // Toggle LED state
        ledState = (ledState == LED_ON) ? LED_OFF : LED_ON;
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ledState>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	09 f4       	brne	.+2      	; 0x39c <LEDM_Manage+0x44>
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <ledState>

        // Write the new state to the LED
        GPIO_Write(LED_PIN, ledState);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_Write>

        // Reset elapsed time
        elapsedTime = 0;
 3a6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <elapsedTime>
 3aa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <elapsedTime+0x1>
 3ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <elapsedTime+0x2>
 3b2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <elapsedTime+0x3>
    }

    // Call WDGM Aliveness Indication to indicate that the LEDM_Manage function is running
    // This counts the number of times the LEDM_Manage function is called
    // WDGM_AlivenessIndication();
}
 3b6:	08 95       	ret

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
