
Code_Scenario_A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003c2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800102  00800102  00000458  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c36  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d54  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000073ca  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000162  00000000  00000000  00009e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00009f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c2d  00000000  00000000  0000a034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 00 	call	0x102	; 0x102 <main>
  9e:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer0_Init>:
unsigned long wdgm_lastTime = 0;                // Time marker for the last WDGM_MainFunction call

void Timer0_Init(void)
{
    // Set Timer0 to CTC mode (WGM01 = 1, WGM00 = 0)
    TCCR0A = (1 << WGM01);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36

    // Set compare value for 1ms interrupt
    // the clock frequency is 1MHz, the prescaler is 64, the timer is 8-bit
    OCR0A = TIMER0_OUTPUT_COMPARE_A;
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	97 bd       	out	0x27, r25	; 39

    // Enable Timer0 Compare Match A interrupt
    TIMSK0 = (1 << OCIE0A);
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

    // Set prescaler to 64 and start Timer0 (CS01 and CS00 bits set)
    TCCR0B = (1 << CS01) | (1 << CS00);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37
}
  b6:	08 95       	ret

000000b8 <__vector_14>:

// ISR for Timer0 Compare Match A
ISR(TIMER0_COMPA_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
    // Increment the time variable every 1ms
    time++;
  ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time>
  ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time+0x1>
  d2:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <time+0x2>
  d6:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <time+0x3>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	a1 1d       	adc	r26, r1
  de:	b1 1d       	adc	r27, r1
  e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <time>
  e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <time+0x1>
  e8:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <time+0x2>
  ec:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <time+0x3>
}
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:

int main()
{
    // Add a toggling pin to indicate the system is running
    DDRB |= (1 << MCU_RESET_TEST_PIN);
 102:	21 9a       	sbi	0x04, 1	; 4
    PINB |= (1 << MCU_RESET_TEST_PIN);
 104:	19 9a       	sbi	0x03, 1	; 3

    // Initialize peripherals
    LEDM_Init();                // LED Manager
 106:	0e 94 a8 01 	call	0x350	; 0x350 <LEDM_Init>
    WDGDrv_Init();              // Watchdog Driver
 10a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <WDGDrv_Init>
    WDGM_Init();                // Watchdog Manager
 10e:	0e 94 56 01 	call	0x2ac	; 0x2ac <WDGM_Init>
    Timer0_Init();              // Timer0
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <Timer0_Init>

    // Enable global interrupts by setting the I-bit in SREG
    SREG |= (1 << PIN_I);
 116:	8f b7       	in	r24, 0x3f	; 63
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8f bf       	out	0x3f, r24	; 63
        {
            // Update the last time to the current time
            wdgm_lastTime = time;

            // Call the WDGM_MainFunction
            stuck_flag = 1;
 11c:	c1 e0       	ldi	r28, 0x01	; 1
    SREG |= (1 << PIN_I);

    while (1)
    {
        // Check if it's time to call LEDM_Manage
        if ((time - ledm_lastTime) >= LEDM_INTERVAL)
 11e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time>
 122:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time+0x1>
 126:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <time+0x2>
 12a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <time+0x3>
 12e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ledm_lastTime>
 132:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ledm_lastTime+0x1>
 136:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ledm_lastTime+0x2>
 13a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ledm_lastTime+0x3>
 13e:	84 1b       	sub	r24, r20
 140:	95 0b       	sbc	r25, r21
 142:	a6 0b       	sbc	r26, r22
 144:	b7 0b       	sbc	r27, r23
 146:	0a 97       	sbiw	r24, 0x0a	; 10
 148:	a1 05       	cpc	r26, r1
 14a:	b1 05       	cpc	r27, r1
 14c:	90 f0       	brcs	.+36     	; 0x172 <main+0x70>
        {
            // Update the last time to the current time
            ledm_lastTime = time;
 14e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time>
 152:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time+0x1>
 156:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <time+0x2>
 15a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <time+0x3>
 15e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ledm_lastTime>
 162:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ledm_lastTime+0x1>
 166:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <ledm_lastTime+0x2>
 16a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <ledm_lastTime+0x3>

            // Call the LED Manager
            LEDM_Manage();
 16e:	0e 94 b1 01 	call	0x362	; 0x362 <LEDM_Manage>
        }

        // Check if it's time to call WDGM_MainFunction
        if ((time - wdgm_lastTime) >= WDGM_INTERVAL)
 172:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time>
 176:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time+0x1>
 17a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <time+0x2>
 17e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <time+0x3>
 182:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 186:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 18a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end+0x2>
 18e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x3>
 192:	84 1b       	sub	r24, r20
 194:	95 0b       	sbc	r25, r21
 196:	a6 0b       	sbc	r26, r22
 198:	b7 0b       	sbc	r27, r23
 19a:	44 97       	sbiw	r24, 0x14	; 20
 19c:	a1 05       	cpc	r26, r1
 19e:	b1 05       	cpc	r27, r1
 1a0:	08 f4       	brcc	.+2      	; 0x1a4 <main+0xa2>
 1a2:	bd cf       	rjmp	.-134    	; 0x11e <main+0x1c>
        {
            // Update the last time to the current time
            wdgm_lastTime = time;
 1a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time>
 1a8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time+0x1>
 1ac:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <time+0x2>
 1b0:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <time+0x3>
 1b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1bc:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 1c0:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>

            // Call the WDGM_MainFunction
            stuck_flag = 1;
 1c4:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <stuck_flag>
            WDGM_MainFunction();
 1c8:	0e 94 66 01 	call	0x2cc	; 0x2cc <WDGM_MainFunction>
 1cc:	a8 cf       	rjmp	.-176    	; 0x11e <main+0x1c>

000001ce <GPIO_Init>:
#define LED_PIN PB0             // Pin 0 in port B

void GPIO_Init(void)
{
    // Configure pin 0 in port B as output
    DDRB |= (1 << LED_PIN);
 1ce:	20 9a       	sbi	0x04, 0	; 4
}
 1d0:	08 95       	ret

000001d2 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{   
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	a9 01       	movw	r20, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <GPIO_Write+0xc>
 1da:	44 0f       	add	r20, r20
 1dc:	55 1f       	adc	r21, r21
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <GPIO_Write+0x8>
 1e2:	ca 01       	movw	r24, r20
    if (PinData == 1)
    {
        PORTB |= (1 << PinId);  // Set the pin high (Set)
 1e4:	95 b1       	in	r25, 0x05	; 5
    DDRB |= (1 << LED_PIN);
}

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{   
    if (PinData == 1)
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <GPIO_Write+0x1e>
    {
        PORTB |= (1 << PinId);  // Set the pin high (Set)
 1ea:	89 2b       	or	r24, r25
    }
    else
    {
        PORTB &= ~(1 << PinId); // Set the pin low (Clear)
 1ec:	85 b9       	out	0x05, r24	; 5
    }
}
 1ee:	08 95       	ret
    {
        PORTB |= (1 << PinId);  // Set the pin high (Set)
    }
    else
    {
        PORTB &= ~(1 << PinId); // Set the pin low (Clear)
 1f0:	80 95       	com	r24
 1f2:	89 23       	and	r24, r25
 1f4:	fb cf       	rjmp	.-10     	; 0x1ec <GPIO_Write+0x1a>

000001f6 <WDGDrv_Init>:
#define WDGDRV_ISRNOTIFICATION_TEST_PIN 2

void WDGDrv_Init(void)
{
	// Disable global interrupts
	SREG &= ~(1 << PIN_I);
 1f6:	8f b7       	in	r24, 0x3f	; 63
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	8f bf       	out	0x3f, r24	; 63

	// Reset the timer
	wdt_reset();
 1fc:	a8 95       	wdr

	// Clear the watchdog reset flag
	MCUSR &= (~(1 << WDRF));
 1fe:	84 b7       	in	r24, 0x34	; 52
 200:	87 7f       	andi	r24, 0xF7	; 247
 202:	84 bf       	out	0x34, r24	; 52

	// Set the watchdog change enable and system reset enable to 1 in the same instruction before making any changes, page 44
	WDTCSR |= (1 << WDCE) | (1 << WDE);
 204:	e0 e6       	ldi	r30, 0x60	; 96
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 61       	ori	r24, 0x18	; 24
 20c:	80 83       	st	Z, r24

	// Enable system reset mode
	// Set maximum time-out value = 8K cycles (~64ms) by seting the watchdog timer prescale pins to 0010
	WDTCSR = (1 << WDE) | (1 << WDP1);
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	80 83       	st	Z, r24

	// Normal port operation, OC1A/OC1B disconnected
	// CTC mode
	TCCR1A = 0;
 212:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	// CTC mode, prescaler 64
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
 216:	8b e0       	ldi	r24, 0x0B	; 11
 218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	// Set the compare value which achieves 50ms timer
	// the clock frequency is 1MHz, the prescaler is 64, the timer is 16-bit
	// sCompare value (no of pulses needed to reach the timeout) = [(clock frequency) / (prescaler*(1/desired time))]-1
	OCR1A = TIMER1_OUTPUT_COMPARE_A;
 21c:	8f e2       	ldi	r24, 0x2F	; 47
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 224:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Enable Timer1 output compare A match interrupt
	TIMSK1 = (1 << OCIE1A);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	// Enable global interrupts by setting PIN_I in the AVR status register to 1
	SREG |= (1 << PIN_I);
 22e:	8f b7       	in	r24, 0x3f	; 63
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8f bf       	out	0x3f, r24	; 63

	// Add a toggling pin to indicate the call of WDGM_MainFunction
    DDRB |= (1 << WDGDRV_ISRNOTIFICATION_TEST_PIN);
 234:	22 9a       	sbi	0x04, 2	; 4
}
 236:	08 95       	ret

00000238 <WDGDrv_IsrNotification>:
}

void WDGDrv_IsrNotification(void)
{	
	// Get the WDGM status from the WDGM component
	WDGM_StatusType wdgmStatus = WDGM_PovideSuppervisionStatus();
 238:	0e 94 9b 01 	call	0x336	; 0x336 <WDGM_PovideSuppervisionStatus>

	// Check if the WDGM status is OK and whether the WDGM_MainFunction is stuck
	if (((wdgmStatus == OK) && (stuck_flag != 1)))
 23c:	81 11       	cpse	r24, r1
 23e:	07 c0       	rjmp	.+14     	; 0x24e <WDGDrv_IsrNotification+0x16>
 240:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <stuck_flag>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	19 f0       	breq	.+6      	; 0x24e <WDGDrv_IsrNotification+0x16>
	{	
		// Toggle the test pin to indicate the call of WDGM_MainFunction
    	PINB |= (1 << WDGDRV_ISRNOTIFICATION_TEST_PIN);
 248:	1a 9a       	sbi	0x03, 2	; 3

		// If so, refresh the watchdog
		wdt_reset();
 24a:	a8 95       	wdr
 24c:	08 95       	ret
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 24e:	88 e1       	ldi	r24, 0x18	; 24
 250:	98 e0       	ldi	r25, 0x08	; 8
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	a8 95       	wdr
 258:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	}
	else {
		// If the WDGM status is NOK or the WDGM_MainFunction is stuck, reset the system
		wdt_enable(WDTO_15MS);
	}
}
 262:	08 95       	ret

00000264 <__vector_11>:
	// Add a toggling pin to indicate the call of WDGM_MainFunction
    DDRB |= (1 << WDGDRV_ISRNOTIFICATION_TEST_PIN);
}

ISR(TIMER1_COMPA_vect)
{	
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
	// Call the WDGDrv_IsrNotification function at the timeout (50ms)
	WDGDrv_IsrNotification();
 286:	0e 94 1c 01 	call	0x238	; 0x238 <WDGDrv_IsrNotification>
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <WDGM_Init>:
#define WDGM_MAINFUNCTION_TEST_PIN 4

void WDGM_Init(void)
{
    // Initialize internal variables
    elapsedTime = 0;
 2ac:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <elapsedTime>
 2b0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <elapsedTime+0x1>
 2b4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <elapsedTime+0x2>
 2b8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <elapsedTime+0x3>
    ledM_Manage_CallCount = 0;
 2bc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ledM_Manage_CallCount+0x1>
 2c0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledM_Manage_CallCount>
    wdgmStatus = OK;
 2c4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <wdgmStatus>
    // Add a toggling pin to indicate the call of WDGM_MainFunction
    DDRB |= (1 << WDGM_MAINFUNCTION_TEST_PIN);
 2c8:	24 9a       	sbi	0x04, 4	; 4
}
 2ca:	08 95       	ret

000002cc <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    // Toggle the test pin to indicate the call of WDGM_MainFunction
    PINB |= (1 << WDGM_MAINFUNCTION_TEST_PIN);
 2cc:	1c 9a       	sbi	0x03, 4	; 3

    // Increment elapsed time by 10ms
    elapsedTime += 20;
 2ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <elapsedTime>
 2d2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <elapsedTime+0x1>
 2d6:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <elapsedTime+0x2>
 2da:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <elapsedTime+0x3>
 2de:	44 96       	adiw	r24, 0x14	; 20
 2e0:	a1 1d       	adc	r26, r1
 2e2:	b1 1d       	adc	r27, r1
 2e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <elapsedTime>
 2e8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <elapsedTime+0x1>
 2ec:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <elapsedTime+0x2>
 2f0:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <elapsedTime+0x3>

    // Check if 100ms has passed
    if (elapsedTime >= 100)
 2f4:	84 36       	cpi	r24, 0x64	; 100
 2f6:	91 05       	cpc	r25, r1
 2f8:	a1 05       	cpc	r26, r1
 2fa:	b1 05       	cpc	r27, r1
 2fc:	a8 f0       	brcs	.+42     	; 0x328 <WDGM_MainFunction+0x5c>
    {   
        // Check if the LEDM_Manage function was called 8 to 12 times
        // Mathematically, the function should be called 10 times (100ms / 10ms(delay) = 10 times)
        if (ledM_Manage_CallCount >= 8 && ledM_Manage_CallCount <= 12)
 2fe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ledM_Manage_CallCount>
 302:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ledM_Manage_CallCount+0x1>
 306:	08 97       	sbiw	r24, 0x08	; 8
 308:	05 97       	sbiw	r24, 0x05	; 5
 30a:	88 f4       	brcc	.+34     	; 0x32e <WDGM_MainFunction+0x62>
        {
            wdgmStatus = OK;
 30c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <wdgmStatus>
        {
            wdgmStatus = NOK;
        }

        // Reset the elapsed time counter
        elapsedTime = 0;
 310:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <elapsedTime>
 314:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <elapsedTime+0x1>
 318:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <elapsedTime+0x2>
 31c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <elapsedTime+0x3>

        // Reset for next period
        ledM_Manage_CallCount = 0;
 320:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ledM_Manage_CallCount+0x1>
 324:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledM_Manage_CallCount>
    }

    // Reset the stuck flag
    stuck_flag = 0;
 328:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <stuck_flag>
}
 32c:	08 95       	ret
        {
            wdgmStatus = OK;
        }
        else
        {
            wdgmStatus = NOK;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <wdgmStatus>
 334:	ed cf       	rjmp	.-38     	; 0x310 <WDGM_MainFunction+0x44>

00000336 <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{   
    // Return the status of the Watchdog Manager
    return wdgmStatus;
}
 336:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <wdgmStatus>
 33a:	08 95       	ret

0000033c <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{   
    // Increment the LEDM_Manage call count
    ledM_Manage_CallCount++;
 33c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ledM_Manage_CallCount>
 340:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ledM_Manage_CallCount+0x1>
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ledM_Manage_CallCount+0x1>
 34a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ledM_Manage_CallCount>
}
 34e:	08 95       	ret

00000350 <LEDM_Init>:
#define LEDM_MANAGE_TEST_PIN 3

void LEDM_Init(void)
{
    // Initialise GPIO for LED
    GPIO_Init();
 350:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GPIO_Init>
    // Set the initial state of the LED to "ON"
    GPIO_Write(LED_PIN, ledState);
 354:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GPIO_Write>
    // Add a toggling pin to indicate the periodic call of LEDM_Manage
    DDRB |= (1 << LEDM_MANAGE_TEST_PIN);
 35e:	23 9a       	sbi	0x04, 3	; 4
}
 360:	08 95       	ret

00000362 <LEDM_Manage>:

void LEDM_Manage(void)
{   
    // Toggle the test pin to indicate the call of LEDM_Manage
    PINB |= (1 << LEDM_MANAGE_TEST_PIN);
 362:	1b 9a       	sbi	0x03, 3	; 3

    // Increment elapsed time by 10ms
    elapsedTime += 10;
 364:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <elapsedTime>
 368:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <elapsedTime+0x1>
 36c:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <elapsedTime+0x2>
 370:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <elapsedTime+0x3>
 374:	0a 96       	adiw	r24, 0x0a	; 10
 376:	a1 1d       	adc	r26, r1
 378:	b1 1d       	adc	r27, r1
 37a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <elapsedTime>
 37e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <elapsedTime+0x1>
 382:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <elapsedTime+0x2>
 386:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <elapsedTime+0x3>

    // Check if 500ms has passed
    if (elapsedTime >= 500)
 38a:	84 3f       	cpi	r24, 0xF4	; 244
 38c:	91 40       	sbci	r25, 0x01	; 1
 38e:	a1 05       	cpc	r26, r1
 390:	b1 05       	cpc	r27, r1
 392:	98 f0       	brcs	.+38     	; 0x3ba <LEDM_Manage+0x58>
    {
        // Toggle LED state
        ledState = (ledState == LED_ON) ? LED_OFF : LED_ON;
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <LEDM_Manage+0x3e>
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>

        // Write the new state to the LED
        GPIO_Write(LED_PIN, ledState);
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GPIO_Write>

        // Reset elapsed time
        elapsedTime = 0;
 3aa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <elapsedTime>
 3ae:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <elapsedTime+0x1>
 3b2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <elapsedTime+0x2>
 3b6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <elapsedTime+0x3>
    }

    // Call WDGM Aliveness Indication to indicate that the LEDM_Manage function is running
    // This counts the number of times the LEDM_Manage function is called
    WDGM_AlivenessIndication();
 3ba:	0c 94 9e 01 	jmp	0x33c	; 0x33c <WDGM_AlivenessIndication>

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
